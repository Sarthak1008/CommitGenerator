package com.AutoCommitter.CommitGenerator;

import java.io.File;
import java.io.FileWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.attribute.PosixFilePermission;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;

import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class InstallHookCommand implements CommandLineRunner {
    @Override
    public void run(String... args) throws Exception {
        if (args.length == 0 || !"install-hook".equals(args[0])) {
            return;
        }

        File repoRoot = new File(".");
        File gitDir = findGitDir(repoRoot);
        if (gitDir == null) {
            System.err.println("Not inside a Git repository.");
            System.exit(1);
        }

        Path hooksDir = resolveHooksDir(repoRoot, gitDir);
        Files.createDirectories(hooksDir);

        boolean isWindows = System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("win");

        if (isWindows) {
            // Always create base sh-compatible hook too (Git for Windows runs sh)
            Path baseHook = hooksDir.resolve("prepare-commit-msg");
            try (FileWriter fw = new FileWriter(baseHook.toFile())) {
                fw.write(unixHookContent());
            }

            Path hook = hooksDir.resolve("prepare-commit-msg.ps1");
            String content = windowsHookContent();
            try (FileWriter fw = new FileWriter(hook.toFile())) {
                fw.write(content);
            }
            // Also create a small .bat to invoke PowerShell for compatibility
            Path bat = hooksDir.resolve("prepare-commit-msg.cmd");
            String batContent = "@echo off\r\n" +
                    "powershell -NoProfile -ExecutionPolicy Bypass -File \"%~dp0prepare-commit-msg.ps1\" %*\r\n";
            try (FileWriter fw = new FileWriter(bat.toFile())) {
                fw.write(batContent);
            }
            System.out.println("Installed prepare-commit-msg hook (Windows) at: " + hooksDir);
        } else {
            Path hook = hooksDir.resolve("prepare-commit-msg");
            String content = unixHookContent();
            try (FileWriter fw = new FileWriter(hook.toFile())) {
                fw.write(content);
            }
            // Make executable on POSIX
            try {
                Set<PosixFilePermission> perms = new HashSet<>();
                perms.add(PosixFilePermission.OWNER_READ);
                perms.add(PosixFilePermission.OWNER_WRITE);
                perms.add(PosixFilePermission.OWNER_EXECUTE);
                perms.add(PosixFilePermission.GROUP_READ);
                perms.add(PosixFilePermission.GROUP_EXECUTE);
                perms.add(PosixFilePermission.OTHERS_READ);
                perms.add(PosixFilePermission.OTHERS_EXECUTE);
                Files.setPosixFilePermissions(hook, perms);
            } catch (UnsupportedOperationException ignored) {
                // Non-POSIX FS, best effort
            }
            System.out.println("Installed prepare-commit-msg hook (Unix) at: " + hooksDir);
        }

        System.exit(0);
    }

    private Path resolveHooksDir(File repoRoot, File gitDir) {
        try {
            org.eclipse.jgit.storage.file.FileRepositoryBuilder b = new org.eclipse.jgit.storage.file.FileRepositoryBuilder()
                    .setGitDir(gitDir)
                    .readEnvironment()
                    .findGitDir();
            try (org.eclipse.jgit.lib.Repository repo = b.build()) {
                org.eclipse.jgit.lib.StoredConfig cfg = repo.getConfig();
                String hooksPath = cfg.getString("core", null, "hooksPath");
                if (hooksPath != null && !hooksPath.isBlank()) {
                    Path p = repoRoot.toPath().resolve(hooksPath).normalize();
                    return p;
                }
            }
        } catch (Exception ignored) { }
        return gitDir.toPath().resolve("hooks");
    }

    private File findGitDir(File start) {
        File current = start;
        while (current != null) {
            File git = new File(current, ".git");
            if (git.exists() && git.isDirectory()) {
                return git;
            }
            current = current.getParentFile();
        }
        return null;
    }

    private String unixHookContent() {
        return "#!/bin/sh\n" +
                "# Auto-generated by CommitGenerator\n" +
                "# If message already has non-comment content, do nothing\n" +
                "if grep -q '^[^#[:space:]]' \"$1\" 2>/dev/null; then\n" +
                "  exit 0\n" +
                "fi\n" +
                "JAR=target/CommitGenerator-0.0.1-SNAPSHOT.jar\n" +
                "MSG=$(java -jar \"$JAR\" generate-commit)\n" +
                "echo \"$MSG\" > \"$1\"\n";
    }

    private String windowsHookContent() {
        return "Param([string]$CommitMsgFile)\n" +
                "$jar = 'target/CommitGenerator-0.0.1-SNAPSHOT.jar'\n" +
                "# Skip if there is any non-comment content\n" +
                "$raw = Get-Content -Path $CommitMsgFile -Raw -ErrorAction SilentlyContinue\n" +
                "$lines = @()\n" +
                "if ($null -ne $raw) { $lines = $raw -split \"`n\" }\n" +
                "$hasText = $lines | Where-Object { $_ -notmatch '^[\t ]*#' } | Where-Object { $_.Trim() -ne '' } | Measure-Object | Select-Object -ExpandProperty Count\n" +
                "if ($hasText -gt 0) { exit 0 }\n" +
                "$MSG = & powershell -NoProfile -Command \"java -jar `\"$jar`\" generate-commit\"\n" +
                "Set-Content -Path $CommitMsgFile -Value $MSG -NoNewline\n";
    }
}


